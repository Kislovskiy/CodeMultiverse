/** You are given two strings word1 and word2. Merge the strings by adding
  * letters in alternating order, starting with word1. If a string is longer
  * than the other, append the additional letters onto the end of the merged
  * string.
  */
def mergeAlternately(word1: String, word2: String): String =
  word1.zipAll(word2, "", "").map { case (a, b) => s"$a$b" }.mkString

/** You are given two strings s and t. String t is generated by random shuffling
  * string s and then add one more letter at a random position. Return the
  * letter that was added to t.
  *
  * The solution uses the XOR property that XOR'ing the same value twice leads
  * to 0, e.g. 5 ^ 5 = 0 Start: acc = 0 Character 'a' (code 97): acc = 0 ^ 97 =
  * 97 Character 'b' (code 98): acc = 97 ^ 98 = 195 Character 'a' (code 97): acc =
  * 195 ^ 97 = 98 (the 'a's canceled!) Character 'b' (code 98): acc = 98 ^ 98 =
  * 0 (the 'b's canceled!) Character 'c' (code 99): acc = 0 ^ 99 = 99
  */
def findTheDifference(s: String, t: String): Char = {
  (s + t).foldLeft(0)((acc, char) => acc ^ char.toInt).toChar
}

/** Given a string s, find the length of the longest substring without duplicate
  * characters.
  */
def lengthOfLongestSubstring(s: String): Int =
  s.scanLeft("")((resStr, curChar) =>
    resStr.substring(1 + resStr.indexOf(curChar)) + curChar
  ).map(_.length)
    .reduce(Math.max)

@main def deck(): Unit =
  println("mergeAlternately: " + mergeAlternately("abcd", "pq"))
  println("findTheDifference: " + findTheDifference("abc", "abcy"))
  println("lengthOfLongestSubstring: " + lengthOfLongestSubstring("abcabcbb"))
